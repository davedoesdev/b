#!/usr/bin/env node

var program = require('commander')
  , path = require('path')
  , join = path.join
  , basename = path.basename
  , resolve = path.resolve
  , fs = require('fs')
  , Batch = require('../lib/batch')

program.version(require('../package').version)
  .usage('[options] [files]')
  .option('-n, --name <name>', 'benchmark title', project())
  .option('-r, --recursive', 'include files in sub directories')
  .option('-R, --reporter <name>', 'specify the reporter to use [table]', 'table')
  .option('-c, --cycles <number>', 'times to execute each benchmark [1000]', 1000)
  .option('-i, --implementations <files...>', 'modules to load into each benchmark', list, [])
  .option('-k, --key <name>', 'the variable for the implementations', 'implementation')

program.on('--help', function () {
  write('  Examples: \n')
  write('\n')
  write('    # batch of all files in a directory\n')
  write('    $ bench examples/file-benches\n')
  write('\n')
})

// guess the current projects name

function project(){
  var cwd = process.cwd()
  if (fs.existsSync(cwd+'/.git')) return basename(cwd)
  return ''
}

function list(args){
  return args.split(',')
}

function write(txt){
  process.stdout.write(txt)
}

program.parse(process.argv)

var args = program.args

// default search path to bench/*.js

if (!args.length) args.push('bench')

// absolutize

args = args.map(function(name){ return resolve(name) })

// match files

var files = args.reduce(function(files, path){
  return files.concat(lookupFiles(path, program.recursive))
}, [])


// Lookup file names at the given `path`.

function lookupFiles(path, recursive) {
  var files = []

  if (!fs.existsSync(path)) path += '.js'
  var stat = fs.statSync(path)
  if (stat.isFile()) return path

  fs.readdirSync(path)
    .filter(function(name){
      return name[0] != '.'
    })
    .forEach(function(file){
      file = join(path, file)
      var stat = fs.statSync(file)
      if (stat.isDirectory()) {
        if (recursive) files = files.concat(lookupFiles(file, recursive))
      } else if (stat.isFile()) {
        if (/\.js$/.test(file)) files.push(file)
      }
    })

  return files
}

// build the batch

var batch = new Batch(program.name)

// --implementations 

var imps = program.implementations
if (imps.length) {
  // expand paths
  imps = imps.map(function(name){ return resolve(name) })
  // look for existing files
  imps = imps.reduce(function(files, path){
    return files.concat(lookupFiles(path, false))
  }, [])
  if (!imps.length) throw new Error('no implementations found')
  batch.load(program.key, imps)
}

// load the benchmarks

files.forEach(function(path){
  batch.addFile(basename(path), path)
})

// --reporter

batch.reporter(program.reporter)

batch.run(program.cycles)
